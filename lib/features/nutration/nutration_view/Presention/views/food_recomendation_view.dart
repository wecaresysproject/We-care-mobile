import 'package:auto_size_text/auto_size_text.dart';
import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:share_plus/share_plus.dart';
import 'package:we_care/core/global/Helpers/extensions.dart';
import 'package:we_care/core/global/Helpers/functions.dart';
import 'package:we_care/core/global/SharedWidgets/custom_app_bar_with_centered_title_widget.dart';
import 'package:we_care/core/global/theming/app_text_styles.dart';
import 'package:we_care/core/global/theming/color_manager.dart';
import 'package:we_care/features/medical_illnesses/data/models/get_follow_up_report_section_model.dart';

class FoodRecomendationView extends StatelessWidget {
  const FoodRecomendationView({super.key, required this.elementName});
  final String elementName;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(toolbarHeight: 0.h),
      body: SingleChildScrollView(
        padding: EdgeInsets.symmetric(horizontal: 16.w, vertical: 16.h),
        child: Column(
          spacing: 16,
          children: [
            AppBarWithCenteredTitle(
              title: elementName,
              titleColor: AppColorsManager.mainDarkBlue,
              shareFunction: () => shareFoodRecommendation(elementName),
              showShareButtonOnly: true,
            ),
            HeaderSectionWithIcon(
              iconPath: 'assets/images/file_icon.png',
              text: "ุชุนุฑูู/ ูุฑุฌุนูุฉ ุณุฑูุนุฉ",
            ),
            Text(
              "ูุนุฏู ุฃุณุงุณู ููุงุญุฏ ูู ุงูุดูุงุฑุฏ ุงูููุฑุจุงุฆูุฉ (Electrolytes) ุงูุฑุฆูุณูุฉ ูู ุงูุฌุณูุ ูููุณุชููู ูู ุงูุบุงูุจ ุนูู ุดูู ููุญ ุงูุทุนุงู (ูููุฑูุฏ ุงูุตูุฏููู). ูุนูู ุงูุตูุฏููู ุนูู ุงูุญูุงุธ ุนูู ุชูุงุฒู ุงูุณูุงุฆู ูู ุงูุฌุณูุ ููุณุงุนุฏ ูู ููู ุงูุฅุดุงุฑุงุช ุงูุนุตุจูุฉ ูุงููุจุงุถ ุงูุนุถูุงุชุ ุจูุง ูู ุฐูู ุนุถูุฉ ุงูููุจ. ูุชูุงุฌุฏ ุจุดูู ุทุจูุนู ูู ุจุนุถ ุงูุฃุทุนูุฉุ ููู ุงููุตุฏุฑ ุงูุฑุฆูุณู ูุงุณุชููุงูู ูู ุงูููุท ุงูุบุฐุงุฆู ุงูุญุฏูุซ ูู ุงูุฃุทุนูุฉ ุงููุตูุนุฉ ูุงููุฌุจุงุช ุงูุฌุงูุฒุฉ ุญูุซ ููุณุชุฎุฏู ุจูุซุฑุฉ ููุงุฏุฉ ุญุงูุธุฉ ููุญุณูู ูููููุฉุ ูุซู ุงูุฎุจุฒุ ุงูุฌุจูุ ุงููุญูู ุงููุตูุนุฉุ ูุงูุตูุตุงุช. ููุนุฏ ุงูุญูุงุธ ุนูู ูุฏุฎูู ูุชูุงุฒู ููู ุฃูุฑุงู ุญูููุงู ููุตุญุฉุ ุญูุซ ุฃู ุงูุฅูุฑุงุท ูู ุชูุงููู ุนูู ุงููุฏู ุงูุทููู ูุฑุชุจุท ุจุดูู ูุจุงุดุฑ ุจุงุฑุชูุงุน ุถุบุท ุงูุฏู ูุฃูุฑุงุถ ุงูููุจ ูุงูููู.",
              textAlign: TextAlign.justify,
              style: AppTextStyles.font14blackWeight400,
            ),
            HeaderSectionWithIcon(
              iconPath: 'assets/images/check_right.png',
              text: "ุงููุณุชูู ุงูุงูู :1500 - 2000",
            ),
            ElevationStatusWidget(
              iconPath: 'assets/images/check_right.png',
              isHightRisk: false,
            ),
            CustomInfoSection(
              headerTitle: 'ุงูุชุฃุซูุฑ ูุตูุฑ ุงููุฏู',
              content:
                  "ุฎูุงู ุฃุณุงุจูุน ุฅูู ุฃุดูุฑ: ูุฏ ูุง ุชุธูุฑ ุฃุนุฑุงุถ ูุงุถุญุฉุ ูููู ูุถุน ุนุจุฆูุง ุฅุถุงูููุง ุนูู ุงูููู ููุณุงูู ูู ุงุญุชุจุงุณ ุงูุณูุงุฆู.",
            ),
            CustomInfoSection(
              headerTitle: 'ุงูุชุฃุซูุฑ ุทููู ุงููุฏู',
              content:
                  "ุนุฏุฉ ุณููุงุช: ูุฒูุฏ ุจุดูู ูุคูุฏ ูู ุฎุทุฑ ุงูุฅุตุงุจุฉ ุจู ุงุฑุชูุงุน ุถุบุท ุงูุฏูุ ูุฃูุฑุงุถ ุงูููุจุ ูุงูุณูุชุฉ ุงูุฏูุงุบูุฉุ ููุดุงุดุฉ ุงูุนุธุงูุ ูุณุฑุทุงู ุงููุนุฏุฉ.",
            ),
            CustomInfoSection(
              headerTitle: 'ุงูุงุฌุฑุงุก',
              content:
                  "ูุฑุงุฌุนุฉ ูุตุงุฏุฑ ุงูุตูุฏููู ุงูุฎููุฉ ูู ุงููุธุงู ุงูุบุฐุงุฆู (ูุซู: ุงูุฎุจุฒุ ุงูุฌุจูุ ุงูุตูุตุงุชุ ุงููุฌุจุงุช ุงูุณุฑูุนุฉ) ูุงูุนูู ุนูู ุชูููููุง ุชุฏุฑูุฌููุง.",
            ),
            HeaderSectionWithIcon(
              iconPath: 'assets/images/person.png',
              text: "ุงูุฃุนุถุงุก ุงูุฃูุซุฑ ุชุฃุซุฑุงู ูุน ุงูููุช",
            ),
            CustomInfoSection(
              headerTitle: 'ุงูููุจ ูุงูุฃูุนูุฉ ุงูุฏูููุฉ',
              content: "ุชุชุฃุซุฑ ุฎูุงู ุฃุดูุฑ ุจุฒูุงุฏุฉ ุถุบุท ุงูุฏู ูุชุตูุจ ุงูุดุฑุงููู.",
            ),
            CustomInfoSection(
              headerTitle: 'ุงูููู',
              content:
                  "ุชุชุฃุซุฑ ูู ุงููุฏู ุงููุชูุณุท (ุฃุดูุฑโุณููุงุช) ุจุฒูุงุฏุฉ ุงูุนุจุก ุงูุชุฑุดูุญู.",
            ),
            CustomInfoSection(
              headerTitle: 'ุงูุฏูุงุบ',
              content:
                  "ุชุชุฃุซุฑ ูู ุงููุฏู ุงููุชูุณุท (ุฃุดูุฑโุณููุงุช) ุจุฒูุงุฏุฉ ุงูุนุจุก ุงูุชุฑุดูุญู.",
            ),
            CustomInfoSection(
              headerTitle: 'ุงูุนุธุงู',
              content:
                  "ุชุชุฃุซุฑ ูู ุงููุฏู ุงููุชูุณุท (ุฃุดูุฑโุณููุงุช) ุจุฒูุงุฏุฉ ุงูุนุจุก ุงูุชุฑุดูุญู.",
            ),
            HeaderSectionWithIcon(
              iconPath: 'assets/images/file_search_icon.png',
              text: "ูุนูููุงุช ุงุถุงููุฉ",
            ),
            CustomInfoSection(
              headerTitle: 'ุงูุฌูุณ',
              content:
                  "ุงูุฅูุฑุงุท ูู ุชูุงูู ุงูุตูุฏููู (ุงูุงุณุชููุงู ุงููุฑุชูุน) ูุฒูุฏ ูู ููุฏุงู ุงููุงูุณููู ุนุจุฑ ุงูุจููุ ููุง ูุฏ ูุณุงูู ูู ุฒูุงุฏุฉ ุฎุทุฑ ุงูุฅุตุงุจุฉ ุจูุดุงุดุฉ ุงูุนุธุงูุ ุฎุงุตุฉ ูุฏู ุงููุณุงุก ุจุนุฏ ุงููุทุงุน ุงูุทูุซ.",
            ),
            CustomInfoSection(
              headerTitle: 'ุงูุนูุฑ',
              content:
                  "ูุจุงุฑ ุงูุณู ุฃูุซุฑ ุญุณุงุณูุฉ ูุชุฃุซูุฑุงุช ุงูุตูุฏููู ุนูู ุถุบุท ุงูุฏู ูููุต ุชูุงูู ุงููุงูุณููู ูุฒูุฏ ุจุดูู ูุจูุฑ ูู ุฎุทุฑ ูุดุงุดุฉ ุงูุนุธุงู ููุณูุฑูุง ูุฏู ูุจุงุฑ ุงูุณู ูู ููุง ุงูุฌูุณูู, ุงูุฃุทูุงู ูุงููุฑุงูููู ูุญุชุงุฌูู ูููุงุช ุฃูู ูู ุงูุจุงูุบูู.",
            ),
            CustomInfoSection(
              headerTitle: 'ุงููุดุงุท',
              content:
                  "ุงูุฑูุงุถููู ุงูุฐูู ูููุฏูู ูููุงุช ูุจูุฑุฉ ูู ุงูุตูุฏููู ุนุจุฑ ุงูุนุฑู ูุฏ ูุญุชุงุฌูู ุฅูู ูุฏุฎูู ุฃุนูู ููููุงู ูุชุนููุถ ุงููุงูุฏุ ูููู ุถูู ุฅุทุงุฑ ุตุญู.",
            ),
            HeaderSectionWithIcon(
              iconPath: 'assets/images/custom_note.png',
              text: "ุงููุฑุงุฌุน ุงูุฃุณุงุณูุฉ",
            ),
            BulletText(
              text: "WHO โ Guideline: Sodium intake for adults and children",
            ),
            BulletText(
              text:
                  "EFSA โ Scientific Opinion on Dietary Reference Values for sodium",
            ),
            BulletText(
              text:
                  "NASEM โ Dietary Reference Intakes for Sodium and Potassium",
            ),
            BulletText(
              text:
                  "He FJ, MacGregor GA, Salt, blood pressure and cardiovascular disease",
            ),
            BulletText(
              text:
                  "Graudal NA et al., Effects of low-sodium diet vs. high-sodium diet on blood pressure and health outcomes",
            ),
          ],
        ),
      ),
    );
  }

  void shareFoodRecommendation(String elementName) {
    final contentBuffer = StringBuffer();

    // ุงูุนููุงู ุงูุฑุฆูุณู
    contentBuffer.writeln("๐น $elementName\n");

    // ุชุนุฑูู
    contentBuffer.writeln("๐ ุชุนุฑูู/ ูุฑุฌุนูุฉ ุณุฑูุนุฉ:");
    contentBuffer
        .writeln("ูุนุฏู ุฃุณุงุณู ููุงุญุฏ ูู ุงูุดูุงุฑุฏ ุงูููุฑุจุงุฆูุฉ (Electrolytes) ...\n");

    // ุงููุณุชูู ุงูุขูู
    contentBuffer.writeln("โ ุงููุณุชูู ุงูุขูู: 1500 - 2000\n");

    // ุงูุชุฃุซูุฑุงุช
    contentBuffer.writeln("โก ุงูุชุฃุซูุฑ ูุตูุฑ ุงููุฏู:");
    contentBuffer.writeln(
        "ุฎูุงู ุฃุณุงุจูุน ุฅูู ุฃุดูุฑ: ูุฏ ูุง ุชุธูุฑ ุฃุนุฑุงุถ ูุงุถุญุฉุ ูููู ูุถุน ุนุจุฆูุง ุฅุถุงูููุง ุนูู ุงูููู ููุณุงูู ูู ุงุญุชุจุงุณ ุงูุณูุงุฆู.\n");

    contentBuffer.writeln("โก ุงูุชุฃุซูุฑ ุทููู ุงููุฏู:");
    contentBuffer.writeln(
        "ุนุฏุฉ ุณููุงุช: ูุฒูุฏ ุจุดูู ูุคูุฏ ูู ุฎุทุฑ ุงูุฅุตุงุจุฉ ุจู ุงุฑุชูุงุน ุถุบุท ุงูุฏู ูุฃูุฑุงุถ ุงูููุจ...\n");

    contentBuffer.writeln("โก ุงูุฅุฌุฑุงุก:");
    contentBuffer.writeln(
        "ูุฑุงุฌุนุฉ ูุตุงุฏุฑ ุงูุตูุฏููู ุงูุฎููุฉ ูู ุงููุธุงู ุงูุบุฐุงุฆู ูุงูุนูู ุนูู ุชูููููุง ุชุฏุฑูุฌูุงู.\n");

    // ุงูุฃุนุถุงุก ุงูุฃูุซุฑ ุชุฃุซุฑุงู
    contentBuffer.writeln("๐ง ุงูุฃุนุถุงุก ุงูุฃูุซุฑ ุชุฃุซุฑุงู:");
    contentBuffer
        .writeln("ุงูููุจ ูุงูุฃูุนูุฉ ุงูุฏูููุฉ: ุชุชุฃุซุฑ ุฎูุงู ุฃุดูุฑ ุจุฒูุงุฏุฉ ุถุบุท ุงูุฏู.\n");
    contentBuffer.writeln("ุงูููู: ุชุชุฃุซุฑ ูู ุงููุฏู ุงููุชูุณุท (ุฃุดูุฑโุณููุงุช).\n");
    contentBuffer.writeln("ุงูุฏูุงุบ: ุชุชุฃุซุฑ ูู ุงููุฏู ุงููุชูุณุท.\n");
    contentBuffer.writeln("ุงูุนุธุงู: ุชุชุฃุซุฑ ูู ุงููุฏู ุงููุชูุณุท.\n");

    // ูุนูููุงุช ุฅุถุงููุฉ
    contentBuffer.writeln("โน๏ธ ูุนูููุงุช ุฅุถุงููุฉ:");
    contentBuffer
        .writeln("ุงูุฌูุณ: ุงูุฅูุฑุงุท ูู ุชูุงูู ุงูุตูุฏููู ูุฒูุฏ ูู ููุฏุงู ุงููุงูุณููู.\n");
    contentBuffer.writeln(
        "ุงูุนูุฑ: ูุจุงุฑ ุงูุณู ุฃูุซุฑ ุญุณุงุณูุฉ ูุชุฃุซูุฑุงุช ุงูุตูุฏููู ุนูู ุถุบุท ุงูุฏู.\n");
    contentBuffer
        .writeln("ุงููุดุงุท: ุงูุฑูุงุถููู ูุฏ ูุญุชุงุฌูู ููุณุชููุงุช ุฃุนูู ููููุงู.\n");

    // ุงููุฑุงุฌุน
    contentBuffer.writeln("๐ ุงููุฑุงุฌุน ุงูุฃุณุงุณูุฉ:");
    contentBuffer
        .writeln("โข WHO โ Guideline: Sodium intake for adults and children");
    contentBuffer.writeln(
        "โข EFSA โ Scientific Opinion on Dietary Reference Values for sodium");
    contentBuffer.writeln(
        "โข NASEM โ Dietary Reference Intakes for Sodium and Potassium");
    contentBuffer.writeln(
        "โข He FJ, MacGregor GA, Salt, blood pressure and cardiovascular disease");
    contentBuffer.writeln(
        "โข Graudal NA et al., Effects of low-sodium diet vs. high-sodium diet\n");

    // ุนูู ุดูุฑ
    Share.share(contentBuffer.toString(),
        subject: "ุชูุตูุฉ ุบุฐุงุฆูุฉ: $elementName");
  }

  /// Builds the content after successful API response
  Widget _buildDetailsContent(List<GetFollowUpReportSectionModel> data) {
    return SingleChildScrollView(
      padding: EdgeInsets.symmetric(horizontal: 16.w, vertical: 16.h),
      child: Column(
        spacing: 16,
        children: [
          AppBarWithCenteredTitle(
            title: 'ุชูุงุตูู ุงูุชูุฑูุฑ',
            titleColor: AppColorsManager.mainDarkBlue,
            shareFunction: () {},
            showShareButtonOnly: true,
          ),
          HeaderSectionWithIcon(
            iconPath: 'assets/images/file_icon.png',
            text: "ุชุนุฑูู/ ูุฑุฌุนูุฉ ุณุฑูุนุฉ",
          ),
          // CustomInfoSection(
          //   headerIcon: Icons.trending_down,
          //   headerTitle: 'ุงููุณุชูู ุงูุฅุฌูุงูู',
          //   content: data[0].sectionContent,
          // ),

          // CustomInfoSection(
          //   headerIcon: Icons.check_circle,
          //   headerTitle: 'ุนุฏุฏ ุงูุฅุฌุงุจุงุช ุงูุฅูุฌุงุจูุฉ',
          //   content: data[1].sectionContent,
          // ),
          // CustomInfoSection(
          //   headerIcon: Icons.question_mark,
          //   headerTitle: 'ููุงุญุธุฉ',
          //   content: data[2].sectionContent,
          // ),
          // CustomInfoSection(
          //   headerIcon: Icons.psychology,
          //   headerTitle: 'ููุฎุต ุงูุญุงูุฉ',
          //   content: data[3].sectionContent,
          // ),
          // CustomInfoSection(
          //   headerIcon: Icons.edit_square,
          //   headerTitle: 'ูุง ุงูุฐู ููุงุญุธู ูู ุฅุฌุงุจุชู ุ',
          //   content: data[4].sectionContent,
          // ),
          // CustomInfoSection(
          //   headerIcon: Icons.psychology,
          //   headerTitle: 'ูุง ุงูุฐู ูุฏ ูุญุฏุซ ุฏุงุฎููุ',
          //   content: data[5].sectionContent,
          // ),
          // CustomInfoSection(
          //   headerIcon: Icons.favorite,
          //   headerTitle: 'ุฑุณุงูุฉ ูู ูู ุงูููุจ',
          //   content: data[6].sectionContent,
          // ),
          // CustomInfoSection(
          //   headerIcon: Icons.edit_square,
          //   headerTitle: 'ุงูุฎุทูุงุช ุงูููุชุฑุญุฉ (ูุตูุฑุฉ ุงููุฏู)',
          //   content: data[7].sectionContent,
          // ),
          // CustomInfoSection(
          //   headerIcon: Icons.self_improvement,
          //   headerTitle: 'ุฎุทุฉ ุฏุนู ููุณู ุชุฏุฑูุฌู  ( ูุชูุณุท  ูุทููู ุงููุฏู )',
          //   content: data[8].sectionContent,
          // ),
          // CustomInfoSection(
          //   headerIcon: Icons.flag,
          //   headerTitle: 'ุฎุชุงููุง',
          //   content: data[9].sectionContent,
          // ),
        ],
      ),
    );
  }
}

class HeaderSectionWithIcon extends StatelessWidget {
  final String iconPath;
  final String text;

  const HeaderSectionWithIcon({
    super.key,
    required this.iconPath,
    required this.text,
  });

  @override
  Widget build(BuildContext context) {
    return Container(
      width: double.infinity,
      padding: EdgeInsets.symmetric(vertical: 5.h),
      decoration: BoxDecoration(
        gradient: const LinearGradient(
          colors: [
            Color(0xFF5998CD),
            Color(0xFF03508F),
            Color(0xff2B2B2B),
          ],
        ),
        borderRadius: BorderRadius.circular(12.r),
      ),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.center,
        mainAxisSize: MainAxisSize.min,
        children: [
          Image.asset(
            iconPath,
            width: 18,
            color: Color(0xffFEFEFE),
            height: 23,
          ),
          horizontalSpacing(8),
          Text(
            text,
            style: AppTextStyles.font18blackWight500.copyWith(
              fontSize: 16.sp,
              color: Colors.white,
            ),
          ),
        ],
      ),
    );
  }
}

class CustomInfoSection extends StatelessWidget {
  final String headerTitle;
  final String content;

  const CustomInfoSection({
    super.key,
    required this.headerTitle,
    required this.content,
  });

  @override
  Widget build(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        SectionHeader(
          title: headerTitle,
        ),
        verticalSpacing(10),
        ContentSection(content: content),
      ],
    );
  }
}

class SectionHeader extends StatelessWidget {
  final String title;

  const SectionHeader({
    super.key,
    required this.title,
  });

  @override
  Widget build(BuildContext context) {
    return Container(
      padding: EdgeInsets.symmetric(vertical: 4.h),
      decoration: BoxDecoration(
        gradient: const LinearGradient(
          end: Alignment.centerLeft,
          begin: Alignment.centerRight,
          colors: [
            Color(0xFFFBFDFF),
            Color(0xFFECF5FF),
          ],
        ),
        borderRadius: BorderRadius.circular(8.r),
      ),
      child: Row(
        children: [
          Flexible(
            child: Stack(
              alignment: Alignment.bottomRight,
              children: [
                Padding(
                  padding:
                      const EdgeInsets.only(bottom: 6), // space for underline
                  child: Text(
                    title,
                    textAlign: TextAlign.right,
                    style: TextStyle(
                      fontFamily: 'Cairo',
                      fontSize: 16,
                      fontWeight: FontWeight.w500,
                      height: 20 / 16,
                      letterSpacing: 0.16,
                      color: AppColorsManager.mainDarkBlue,
                    ),
                  ),
                ),
                Positioned(
                  bottom: 0,
                  right: 0,
                  child: Container(
                    width: _calculateTextWidth(title, context),
                    height: 1,
                    color: AppColorsManager.mainDarkBlue,
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  double _calculateTextWidth(String text, BuildContext context) {
    final TextPainter textPainter = TextPainter(
      text: TextSpan(
        text: text,
        style: TextStyle(
          fontFamily: 'Cairo',
          fontSize: 16,
          fontWeight: FontWeight.w500,
          letterSpacing: 0.16,
        ),
      ),
      maxLines: 1,
      textDirection: TextDirection.rtl,
    )..layout(minWidth: 0, maxWidth: double.infinity);

    return textPainter.size.width;
  }
}

// Reusable content section component
class ContentSection extends StatelessWidget {
  final String content;

  const ContentSection({
    super.key,
    required this.content,
  });

  @override
  Widget build(BuildContext context) {
    return Text(
      content,
      style: AppTextStyles.font14blackWeight400,
      textAlign: TextAlign.justify,
    );
  }
}

class BulletText extends StatelessWidget {
  final String text;
  final TextStyle? style;
  final double bulletSize;
  final Color bulletColor;
  final double spacing;

  const BulletText({
    super.key,
    required this.text,
    this.style,
    this.bulletSize = 6.0,
    this.bulletColor = Colors.black,
    this.spacing = 8.0,
  });

  @override
  Widget build(BuildContext context) {
    return Row(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Container(
          margin: const EdgeInsets.only(top: 6), // ูุถุจุท ุงููุญุงุฐุงุฉ ูุน ุงููุต
          width: bulletSize,
          height: bulletSize,
          decoration: BoxDecoration(
            color: bulletColor,
            shape: BoxShape.circle,
          ),
        ),
        SizedBox(width: spacing),
        Expanded(
          child: Text(
            text,
            style: style ?? const TextStyle(fontSize: 16),
          ),
        ),
      ],
    );
  }
}

class ElevationStatusWidget extends StatelessWidget {
  final String iconPath;
  final bool isHightRisk;

  const ElevationStatusWidget({
    super.key,
    required this.iconPath,
    required this.isHightRisk,
  });

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        Row(
          children: [
            Container(
              width: 130.w,
              height: 30.h,
              padding: EdgeInsets.all(5.5),
              decoration: BoxDecoration(
                borderRadius: BorderRadius.only(
                  topLeft: Radius.circular(
                    12.r,
                  ),
                  topRight: Radius.circular(
                    12.r,
                  ),
                ), // ุงุฎุชูุงุฑูุ ูุชุฏููุฑ ุงูุญูุงู
                color: isHightRisk
                    ? Color(0xffE02E2E)
                    : AppColorsManager.doneColor,
              ),
              child: Row(
                children: [
                  Icon(
                    isHightRisk ? Icons.arrow_upward : Icons.arrow_downward,
                    size: 20,
                    color: Colors.white,
                  ),
                  Text(
                    isHightRisk ? "ูุณุชููุงุช ุงูุงุฑุชูุงุน" : "ูุณุชููุงุช ุงูุงูุฎูุงุถ",
                    textAlign: TextAlign.center,
                    style: AppTextStyles.font18blackWight500.copyWith(
                      fontSize: 12.sp,
                      color: Colors.white,
                    ),
                  ),
                ],
              ),
            ).paddingRight(60),
            Spacer(),
            Container(
              padding: EdgeInsets.all(4),
              decoration: BoxDecoration(
                border: Border.all(
                  color: isHightRisk
                      ? const Color(0xffE02E2E)
                      : AppColorsManager.doneColor,
                  width: 2.0, // ุณูู ุงูุญุฏูุฏ
                ),
                borderRadius:
                    BorderRadius.circular(8), // ุงุฎุชูุงุฑูุ ูุชุฏููุฑ ุงูุญูุงู
                color: Colors.transparent, // ุฎููู ุดูุงู ูู ุนุงูุฒ ุจุณ ุงูุญุฏูุฏ
              ),
              child: Text(
                "ุงููุชูุฌุฉ ุงูุญุงููุฉ 2200",
                style: AppTextStyles.font18blackWight500.copyWith(
                  fontSize: 12.sp,
                  color: AppColorsManager.mainDarkBlue,
                ),
              ),
            ),
          ],
        ),
        Container(
          width: double.infinity,
          padding: EdgeInsets.symmetric(vertical: 5.h),
          decoration: BoxDecoration(
            gradient: const LinearGradient(
              colors: [
                Color(0xFF5998CD),
                Color(0xFF03508F),
                Color(0xff2B2B2B),
              ],
            ),
            borderRadius: BorderRadius.circular(12.r),
          ),
          child: Row(
            mainAxisAlignment: MainAxisAlignment.center,
            mainAxisSize: MainAxisSize.min,
            children: [
              CircleAvatar(
                backgroundColor:
                    isHightRisk ? Colors.redAccent : Colors.amberAccent,
                radius: 12.r,
              ).paddingRight(10),
              horizontalSpacing(8),
              AutoSizeText(
                isHightRisk
                    ? "ุฃูุช ูู ูุณุชูู ุงูุฎุทุฑ ุงูุนุงูู"
                    : "ุฃูุช ูู ูุณุชูู ุงููุฑุงูุจุฉ ูุงูุชูุจูู",
                style: AppTextStyles.font18blackWight500.copyWith(
                  fontSize: 16.sp,
                  color: Colors.white,
                ),
                maxFontSize: 14,
              ),
              Spacer(),
              isHightRisk
                  ? Container(
                      padding: EdgeInsets.all(2),
                      decoration: BoxDecoration(
                        color: Colors.white,
                        borderRadius: BorderRadius.circular(8.r),
                      ),
                      child: Text(
                        "(< 4000)",
                        style: AppTextStyles.font14whiteWeight600.copyWith(
                          color: Colors.redAccent,
                        ),
                      ),
                    ).paddingLeft(10)
                  : Text(
                      "(2001 - 3000)",
                      style: AppTextStyles.font14BlueWeight700.copyWith(
                        color: Colors.yellowAccent,
                      ),
                    )
            ],
          ),
        ),
      ],
    );
  }
}
